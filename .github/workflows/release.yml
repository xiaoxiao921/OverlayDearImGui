name: Thunderstore Release

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest  
    steps:

    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup NuGet
      uses: NuGet/setup-nuget@v1

    - name: Setup TCLI
      run: dotnet tool install --global tcli

    - name: Setup dotnet
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    # Install Mono on Ubuntu to run nuget.exe (due to this issue on Ubuntu 24 that hasn't been fixed yet - https://github.com/NuGet/setup-nuget/issues/168)
    - name: Install Mono on Ubuntu
      run: |
        sudo apt-get update
        sudo apt-get install -y apt-transport-https dirmngr gnupg ca-certificates
        sudo apt-key adv --recv-keys --keyserver hkp://keyserver.ubuntu.com:80 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF
        echo "deb https://download.mono-project.com/repo/ubuntu stable-focal main" | sudo tee /etc/apt/sources.list.d/mono-official-stable.list
        sudo apt-get update
        sudo apt-get install -y mono-complete
    
    - name: Install yq
      run: |
        YQ_VERSION=v4.44.1
        ARCH=amd64
        wget https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/yq_linux_${ARCH} -O yq
        chmod +x yq
        sudo mv yq /usr/local/bin/yq

    - name: Build and Publish
      run: |
        set -x

        # Find all csproj files that also have a thunderstore.toml next to them.
        mapfile -t csproj_paths < <(find . -name '*.csproj' -exec test -f "{}/../thunderstore.toml" \; -print)

        # Sort to ensure OverlayDearImGui.Shared comes first
        csproj_paths=($(printf '%s\n' "${csproj_paths[@]}" | sort -r | grep OverlayDearImGui.Shared.csproj; printf '%s\n' "${csproj_paths[@]}" | grep -v OverlayDearImGui.Shared.csproj))

        for csproj in "${csproj_paths[@]}"; do
          dir=$(dirname "$csproj")
          base=$(basename "$csproj" .csproj)
          namespace=$(yq e '.package.namespace' "$dir/thunderstore.toml")
          name_underscore_separator=$(yq e '.package.name' "$dir/thunderstore.toml")
          version=$(yq e '.package.versionNumber' "$dir/thunderstore.toml")
          name_dot_separator="${name_underscore_separator//_/.}"
          nuget_package_name="${name_dot_separator}"

          echo "Processing $csproj in $dir"

          # Inject <Version>$version</Version> if not present, or update it
          if grep -q "<Version>.*</Version>" "$csproj"; then
            sed -i "s|<Version>.*</Version>|<Version>$version</Version>|" "$csproj"
          else
            sed -i "/<PropertyGroup>/a \  <Version>$version</Version>" "$csproj"
          fi

          is_project_built=false

          # Check NuGet
          existing_nuget=$(curl --compressed -s "https://api-v2v3search-0.nuget.org/query?q=packageid:${nuget_package_name}&prerelease=true&semVerLevel=2.0.0" | jq '.data[0]?.versions[]?.version' | grep "${version}\"" || true)
          if [ -z "$existing_nuget" ]; then
            dotnet pack "$csproj" --configuration Release /p:PackageOutputPath="$dir/ReleaseOutput" /p:OutputPath="$dir/ReleaseOutput"
            is_project_built=true
            nuget setapikey "${{ secrets.NUGET_API_KEY }}"
            # nuget push "$dir/ReleaseOutput/*.nupkg" -Source 'https://api.nuget.org/v3/index.json'
            find "$dir" -name '*.nupkg' -type f -delete
          fi

          # Check Thunderstore
          existing_ts=$(curl --compressed -s "https://thunderstore.io/api/v1/package/" | jq --arg package_name "$namespace-$name_underscore_separator" '.[]? | select(.full_name|startswith($package_name)) | .versions[0]?.version_number' | grep "${version}\"" || true)
          if [ -z "$existing_ts" ]; then
            if [ "$is_project_built" = false ]; then
              dotnet pack "$csproj" --configuration Release /p:PackageOutputPath="$dir/ReleaseOutput" /p:OutputPath="$dir/ReleaseOutput"
            fi

            find "$dir" -name '*.pdb' -type f -delete
            find "$dir" -name '*.deps.json' -type f -delete

            # tcli publish --token "${{ secrets.TCLI_AUTH_TOKEN }}"
            echo "Would publish Thunderstore package from $dir"

            rm -rf "$dir/build"
          fi
        done